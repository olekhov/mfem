// Copyright (c) 2010, Lawrence Livermore National Security, LLC. Produced at
// the Lawrence Livermore National Laboratory. LLNL-CODE-443211. All Rights
// reserved. See file COPYRIGHT for details.
//
// This file is part of the MFEM library. For more information and source code
// availability see http://mfem.org.
//
// MFEM is free software; you can redistribute it and/or modify it under the
// terms of the GNU Lesser General Public License (as published by the Free
// Software Foundation) version 2.1 dated February 1999.

#include "occa://mfem/fem/defines.okl"

//---[ 1D ]-----------------------------
kernel void Assemble1D(const int numElements,
                       const double *quadWeights,
                       const Jacobian1D_t J,
                       COEFF_ARGS
                       QLocal_t oper) {
  for (int eOff = 0; eOff < numElements; eOff += A1_ELEMENT_BATCH; outer) {
    for (int e = eOff; e < (eOff + A1_ELEMENT_BATCH); ++e; inner) {
      if (e < numElements) {
        for (int q = 0; q < NUM_QUAD_1D; ++q; inner) {
          oper(q, e) = quadWeights[q] * COEFF * J(q, e);
        }
      }
    }
  }
}

kernel void MultAdd1D(const int numElements,
                      const DofToQuad_t restrict dofToQuad,
                      const DofToQuad_t restrict dofToQuadD,
                      const QuadToDof_t restrict quadToDof,
                      const QuadToDof_t restrict quadToDofD,
                      const QLocal1D_t restrict oper,
                      const DLocal1D_t restrict solIn,
                      DLocal1D_t restrict solOut) {
  // Iterate over elements
  for (int eOff = 0; eOff < numElements; eOff += M1_ELEMENT_BATCHES; outer) {
    shared double s_dofToQuad[NUM_QUAD_DOFS_1D] @dim(NUM_QUAD_1D, NUM_DOFS_1D);
    shared double s_quadToDof[NUM_QUAD_DOFS_1D] @dim(NUM_DOFS_1D, NUM_QUAD_1D);

    exclusive double r_sol[NUM_QUAD_1D];

    for (int el = 0; el < M1_INNER_ELEMENT_BATCH; ++el; inner) {
      for (int i = el; i < NUM_QUAD_DOFS_1D; i += M1_INNER_ELEMENT_BATCH) {
        s_dofToQuad[i] = dofToQuad[i];
        s_quadToDof[i] = quadToDof[i];
      }
    }

    for (int b = 0; b < M1_OUTER_ELEMENT_BATCH; ++b) {
      for (int el = 0; el < M1_INNER_ELEMENT_BATCH; ++el; inner) {
        const int e = eOff + b*M1_INNER_ELEMENT_BATCH + el;
        if (e < numElements) {
          for (int qx = 0; qx < NUM_QUAD_1D; ++qx) {
            r_sol[qx] = 0;
          }
          for (int dx = 0; dx < NUM_DOFS_1D; ++dx) {
            const double s = solIn(dx, e);
            for (int qx = 0; qx < NUM_QUAD_1D; ++qx) {
              r_sol[qx] += s * s_dofToQuad(qx, dx);
            }
          }
          for (int qx = 0; qx < NUM_QUAD_1D; ++qx) {
            r_sol[qx] *= oper(qx, e);
          }
          for (int dx = 0; dx < NUM_DOFS_1D; ++dx) {
            double s = 0;
            for (int qx = 0; qx < NUM_QUAD_1D; ++qx) {
              s += r_sol[qx] * s_quadToDof(dx, qx);
            }
            solOut(dx, e) += s;
          }
        }
      }
    }
  }
}
//======================================


//---[ 2D ]-----------------------------
kernel void Assemble2D(const int numElements,
                       const double *quadWeights,
                       const Jacobian2D_t J,
                       COEFF_ARGS
                       QLocal_t oper) {
  for (int eOff = 0; eOff < numElements; eOff += A2_ELEMENT_BATCH; outer) {
    for (int e = eOff; e < (eOff + A2_ELEMENT_BATCH); ++e; inner) {
      if (e < numElements) {
        for (int qOff = 0; qOff < A2_QUAD_BATCH; ++qOff; inner) {
          for (int q = qOff; q < NUM_QUAD_2D; q += A2_QUAD_BATCH) {
            const double J11 = J(0, 0, q, e), J12 = J(1, 0, q, e);
            const double J21 = J(0, 1, q, e), J22 = J(1, 1, q, e);

            oper(q, e) = quadWeights[q] * COEFF * ((J11 * J22) - (J21 * J12));
          }
        }
      }
    }
  }
}

kernel void MultAdd2D(const int numElements,
                      const DofToQuad_t restrict dofToQuad,
                      const DofToQuad_t restrict dofToQuadD,
                      const QuadToDof_t restrict quadToDof,
                      const QuadToDof_t restrict quadToDofD,
                      const QLocal2D_t restrict oper,
                      const DLocal2D_t restrict solIn,
                      DLocal2D_t restrict solOut) {
  // Iterate over elements
  for (int eOff = 0; eOff < numElements; eOff += M2_ELEMENT_BATCH; outer) {
    // Store dof <--> quad mappings
    shared double s_dofToQuad[NUM_QUAD_DOFS_1D] @dim(NUM_QUAD_1D, NUM_DOFS_1D);
    shared double s_quadToDof[NUM_QUAD_DOFS_1D] @dim(NUM_DOFS_1D, NUM_QUAD_1D);

    // Store xy planes in shared memory
    shared double s_xy[NUM_QUAD_DOFS_1D] @dim(NUM_DOFS_1D, NUM_QUAD_1D);
    shared double s_xy2[NUM_QUAD_2D] @dim(NUM_QUAD_1D, NUM_QUAD_1D);

    exclusive double r_x[NUM_MAX_1D];

    for (int x = 0; x < NUM_MAX_1D; ++x; inner) {
      for (int id = x; id < NUM_QUAD_DOFS_1D; id += NUM_MAX_1D) {
        s_dofToQuad[id]  = dofToQuad[id];
        s_quadToDof[id]  = quadToDof[id];
      }
    }

    for (int e = eOff; e < (eOff + M2_ELEMENT_BATCH); ++e) {
      if (e < numElements) {
        for (int dx = 0; dx < NUM_MAX_1D; ++dx; inner) {
          if (dx < NUM_DOFS_1D) {
            for (int qy = 0; qy < NUM_QUAD_1D; ++qy) {
              s_xy(dx, qy) = 0;
            }
            for (int dy = 0; dy < NUM_DOFS_1D; ++dy) {
              r_x[dy] = solIn(dx, dy, e);
            }
            for (int qy = 0; qy < NUM_QUAD_1D; ++qy) {
              double xy = 0;
              for (int dy = 0; dy < NUM_DOFS_1D; ++dy) {
                xy += r_x[dy] * s_dofToQuad(qy, dy);
              }
              s_xy(dx, qy) = xy;
            }
          }
        }
        for (int qy = 0; qy < NUM_MAX_1D; ++qy; inner) {
          if (qy < NUM_QUAD_1D) {
            for (int qx = 0; qx < NUM_QUAD_1D; ++qx) {
              double s = 0;
              for (int dx = 0; dx < NUM_DOFS_1D; ++dx) {
                s += s_xy(dx, qy) * s_dofToQuad(qx, dx);
              }
              s_xy2(qx, qy) = s * oper(qx, qy, e);
            }
          }
        }

        for (int qx = 0; qx < NUM_MAX_1D; ++qx; inner) {
          if (qx < NUM_QUAD_1D) {
            for (int dy = 0; dy < NUM_DOFS_1D; ++dy) {
              s_xy(dy, qx) = 0;
            }
            for (int qy = 0; qy < NUM_QUAD_1D; ++qy) {
              r_x[qy] = s_xy2(qx, qy);
            }
            for (int dy = 0; dy < NUM_DOFS_1D; ++dy) {
              double s = 0;
              for (int qy = 0; qy < NUM_QUAD_1D; ++qy) {
                s += r_x[qy] * s_quadToDof(dy, qy);
              }
              s_xy(dy, qx) = s;
            }
          }
        }
        for (int dx = 0; dx < NUM_MAX_1D; ++dx; inner) {
          if (dx < NUM_DOFS_1D) {
            for (int dy = 0; dy < NUM_DOFS_1D; ++dy) {
              double s = 0;
              for (int qx = 0; qx < NUM_QUAD_1D; ++qx) {
                s += (s_xy(dy, qx) * s_quadToDof(dx, qx));
              }
              solOut(dx, dy, e) += s;
            }
          }
        }
      }
    }
  }
}
//======================================


//---[ 3D ]-----------------------------
kernel void Assemble3D(const int numElements,
                       const double *quadWeights,
                       const Jacobian3D_t J,
                       COEFF_ARGS
                       QLocal_t oper) {
  for (int eOff = 0; eOff < numElements; eOff += A3_ELEMENT_BATCH; outer) {
    for (int e = eOff; e < (eOff + A3_ELEMENT_BATCH); ++e; inner) {
      if (e < numElements) {
        for (int qOff = 0; qOff < A3_QUAD_BATCH; ++qOff; inner) {
          for (int q = qOff; q < NUM_QUAD_3D; q += A3_QUAD_BATCH) {
            const double J11 = J(0, 0, q, e), J12 = J(1, 0, q, e), J13 = J(2, 0, q, e);
            const double J21 = J(0, 1, q, e), J22 = J(1, 1, q, e), J23 = J(2, 1, q, e);
            const double J31 = J(0, 2, q, e), J32 = J(1, 2, q, e), J33 = J(2, 2, q, e);

            const double detJ = ((J11 * J22 * J33) + (J12 * J23 * J31) + (J13 * J21 * J32) -
                                 (J13 * J22 * J31) - (J12 * J21 * J33) - (J11 * J23 * J32));

            oper(q, e) = quadWeights[q] * COEFF * detJ;
          }
        }
      }
    }
  }
}

kernel void MultAdd3D(const int numElements,
                      const DofToQuad_t restrict dofToQuad,
                      const DofToQuad_t restrict dofToQuadD,
                      const QuadToDof_t restrict quadToDof,
                      const QuadToDof_t restrict quadToDofD,
                      const QLocal3D_t restrict oper,
                      const DLocal3D_t restrict solIn,
                      DLocal3D_t restrict solOut) {
  // Iterate over elements
  for (int e = 0; e < numElements; ++e; outer) {
    // Store dof <--> quad mappings
    shared double s_dofToQuad[NUM_QUAD_DOFS_1D] @dim(NUM_QUAD_1D, NUM_DOFS_1D);
    shared double s_quadToDof[NUM_QUAD_DOFS_1D] @dim(NUM_DOFS_1D, NUM_QUAD_1D);

    // Store xy planes in shared memory
    shared double s_xy[NUM_MAX_2D] @dim(NUM_MAX_1D, NUM_MAX_1D);

    // Store z axis as registers
    exclusive double r_z[NUM_QUAD_1D];
    exclusive double r_z2[NUM_DOFS_1D];

    for (int y = 0; y < NUM_MAX_1D; ++y; inner) {
      for (int x = 0; x < NUM_MAX_1D; ++x; inner) {
        const int id = (y * NUM_MAX_1D) + x;
        // Fetch Q <--> D maps
        if (id < NUM_QUAD_DOFS_1D) {
          s_dofToQuad[id]  = dofToQuad[id];
          s_quadToDof[id]  = quadToDof[id];
        }
        // Initialize our Z axis
        for (int qz = 0; qz < NUM_QUAD_1D; ++qz) {
          r_z[qz] = 0;
        }
        for (int dz = 0; dz < NUM_DOFS_1D; ++dz) {
          r_z2[dz] = 0;
        }
      }
    }

    for (int dy = 0; dy < NUM_MAX_1D; ++dy; inner) {
      for (int dx = 0; dx < NUM_MAX_1D; ++dx; inner) {
        if ((dx < NUM_DOFS_1D) && (dy < NUM_DOFS_1D)) {
          for (int dz = 0; dz < NUM_DOFS_1D; ++dz) {
            const double s = solIn(dx, dy, dz, e);
            // Calculate D -> Q in the Z axis
            for (int qz = 0; qz < NUM_QUAD_1D; ++qz) {
              r_z[qz] += s * s_dofToQuad(qz, dz);
            }
          }
        }
      }
    }
    // For each xy plane
    for (int qz = 0; qz < NUM_QUAD_1D; ++qz) {
      // Fill xy plane at given z position
      for (int dy = 0; dy < NUM_MAX_1D; ++dy; inner) {
        for (int dx = 0; dx < NUM_MAX_1D; ++dx; inner) {
          if ((dx < NUM_DOFS_1D) && (dy < NUM_DOFS_1D)) {
            s_xy(dx, dy) = r_z[qz];
          }
        }
      }
      // Calculate Dxyz, xDyz, xyDz in plane
      for (int qy = 0; qy < NUM_MAX_1D; ++qy; inner) {
        for (int qx = 0; qx < NUM_MAX_1D; ++qx; inner) {
          if ((qx < NUM_QUAD_1D) && (qy < NUM_QUAD_1D)) {
            double s = 0;
            for (int dy = 0; dy < NUM_DOFS_1D; ++dy) {
              const double wy = s_dofToQuad(qy, dy);
              for (int dx = 0; dx < NUM_DOFS_1D; ++dx) {
                const double wx = s_dofToQuad(qx, dx);
                s += wx * wy * s_xy(dx, dy);
              }
            }

            s *= oper(qx, qy, qz, e);

            for (int dz = 0; dz < NUM_DOFS_1D; ++dz) {
              const double wz  = s_quadToDof(dz, qz);
              r_z2[dz] += wz * s;
            }
          }
        }
      }
    }
    // Iterate over xy planes to compute solution
    for (int dz = 0; dz < NUM_DOFS_1D; ++dz) {
      // Place xy plane in shared memory
      for (int qy = 0; qy < NUM_MAX_1D; ++qy; inner) {
        for (int qx = 0; qx < NUM_MAX_1D; ++qx; inner) {
          if ((qx < NUM_QUAD_1D) && (qy < NUM_QUAD_1D)) {
            s_xy(qx, qy) = r_z2[dz];
          }
        }
      }
      // Finalize solution in xy plane
      for (int dy = 0; dy < NUM_MAX_1D; ++dy; inner) {
        for (int dx = 0; dx < NUM_MAX_1D; ++dx; inner) {
          if ((dx < NUM_DOFS_1D) && (dy < NUM_DOFS_1D)) {
            double solZ = 0;
            for (int qy = 0; qy < NUM_QUAD_1D; ++qy) {
              const double wy = s_quadToDof(dy, qy);
              for (int qx = 0; qx < NUM_QUAD_1D; ++qx) {
                const double wx = s_quadToDof(dx, qx);
                solZ += wx * wy * s_xy(qx, qy);
              }
            }
            solOut(dx, dy, dz, e) += solZ;
          }
        }
      }
    }
  }
}
//======================================
