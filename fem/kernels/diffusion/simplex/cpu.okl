// Copyright (c) 2010, Lawrence Livermore National Security, LLC. Produced at
// the Lawrence Livermore National Laboratory. LLNL-CODE-443211. All Rights
// reserved. See file COPYRIGHT for details.
//
// This file is part of the MFEM library. For more information and source code
// availability see http://mfem.org.
//
// MFEM is free software; you can redistribute it and/or modify it under the
// terms of the GNU Lesser General Public License (as published by the Free
// Software Foundation) version 2.1 dated February 1999.

#include "occa://mfem/fem/defines.okl"

//---[ 2D ]-----------------------------
kernel void Assemble2D(const int numElements,
                       const double * restrict quadWeights,
                       const Jacobian2D_t restrict J,
                       COEFF_ARGS
                       SymmOperator2D_t restrict oper) {
  for (int e = 0; e < numElements; ++e; outer) {
    for (int q = 0; q < NUM_QUAD; ++q; inner) {
      const double J11 = J(0, 0, q, e), J12 = J(1, 0, q, e);
      const double J21 = J(0, 1, q, e), J22 = J(1, 1, q, e);

      const double c_detJ = quadWeights[q] * COEFF / ((J11 * J22) - (J21 * J12));

      oper(0, q, e) =  c_detJ * (J12*J12 + J22*J22); // (1,1)
      oper(1, q, e) = -c_detJ * (J12*J11 + J22*J21); // (1,2) + (2,1)
      oper(2, q, e) =  c_detJ * (J11*J11 + J21*J21); // (2,2)
    }
  }
}

kernel void Mult2D(const int numElements,
                   const DofToQuad_t restrict dofToQuad,
                   const DofToQuadD2D_t restrict dofToQuadD,
                   const QuadToDof_t restrict quadToDof,
                   const QuadToDofD2D_t restrict quadToDofD,
                   const SymmOperator2D_t restrict oper,
                   DLocal_t restrict sol) {
  // Iterate over elements
  for (int e = 0; e < numElements; ++e; outer) {
    for (int dummy = 0; dummy < 1; ++dummy; inner) {
      double r_sol[NUM_DOFS];
      for (int d = 0; d < NUM_DOFS; ++d) {
        r_sol[d] = 0;
      }

      for (int q = 0; q < NUM_QUAD; ++q) {
        double gradX = 0, gradY = 0;
        for (int d = 0; d < NUM_DOFS; ++d) {
          const double s = sol(d, e);
          gradX += s * quadToDofD(0, d, q);
          gradY += s * quadToDofD(1, d, q);
        }
        const double O11 = oper(0, q, e);
        const double O12 = oper(1, q, e);
        const double O22 = oper(2, q, e);

        const double gradX2 = (O11 * gradX) + (O12 * gradY);
        const double gradY2 = (O12 * gradX) + (O22 * gradY);

        for (int d = 0; d < NUM_DOFS; ++d) {
          r_sol[d] += ((gradX2 * quadToDofD(0, d, q)) +
                       (gradY2 * quadToDofD(1, d, q)));
        }
      }

      for (int d = 0; d < NUM_DOFS; ++d) {
        sol(d, e) = r_sol[d];
      }
    }
  }
}
//======================================


//---[ 3D ]-----------------------------
kernel void Assemble3D(const int numElements,
                       const double * restrict quadWeights,
                       const Jacobian3D_t restrict J,
                       COEFF_ARGS
                       SymmOperator3D_t restrict oper) {
  for (int e = 0; e < numElements; ++e; outer) {
    for (int q = 0; q < NUM_QUAD; ++q; inner) {
      const double J11 = J(0, 0, q, e), J12 = J(1, 0, q, e), J13 = J(2, 0, q, e);
      const double J21 = J(0, 1, q, e), J22 = J(1, 1, q, e), J23 = J(2, 1, q, e);
      const double J31 = J(0, 2, q, e), J32 = J(1, 2, q, e), J33 = J(2, 2, q, e);

      const double detJ = ((J11 * J22 * J33) + (J12 * J23 * J31) + (J13 * J21 * J32) -
                           (J13 * J22 * J31) - (J12 * J21 * J33) - (J11 * J23 * J32));

      const double c_detJ = quadWeights[q] * COEFF / detJ;

      // adj(J)
      const double A11 = (J22 * J33) - (J23 * J32);
      const double A12 = (J23 * J31) - (J21 * J33);
      const double A13 = (J21 * J32) - (J22 * J31);

      const double A21 = (J13 * J32) - (J12 * J33);
      const double A22 = (J11 * J33) - (J13 * J31);
      const double A23 = (J12 * J31) - (J11 * J32);

      const double A31 = (J12 * J23) - (J13 * J22);
      const double A32 = (J13 * J21) - (J11 * J23);
      const double A33 = (J11 * J22) - (J12 * J21);

      // adj(J)^Tadj(J)
      oper(0, q, e) = c_detJ * (A11*A11 + A21*A21 + A31*A31); // (1,1)
      oper(1, q, e) = c_detJ * (A11*A12 + A21*A22 + A31*A32); // (1,2) + (2,1)
      oper(2, q, e) = c_detJ * (A11*A13 + A21*A23 + A31*A33); // (1,3) + (3,1)
      oper(3, q, e) = c_detJ * (A12*A12 + A22*A22 + A32*A32); // (2,2)
      oper(4, q, e) = c_detJ * (A12*A13 + A22*A23 + A32*A33); // (2,3) + (3,2)
      oper(5, q, e) = c_detJ * (A13*A13 + A23*A23 + A33*A33); // (3,3)
    }
  }
}

kernel void Mult3D(const int numElements,
                   const DofToQuad_t restrict dofToQuad,
                   const DofToQuadD3D_t restrict dofToQuadD,
                   const QuadToDof_t restrict quadToDof,
                   const QuadToDofD3D_t restrict quadToDofD,
                   const SymmOperator3D_t restrict oper,
                   DLocal_t restrict sol) {
  // Iterate over elements
  for (int e = 0; e < numElements; ++e; outer) {
    for (int dummy = 0; dummy < 1; ++dummy; inner) {
      double r_sol[NUM_DOFS];
      for (int d = 0; d < NUM_DOFS; ++d) {
        r_sol[d] = 0;
      }

      for (int q = 0; q < NUM_QUAD; ++q) {
        double gradX = 0, gradY = 0, gradZ = 0;
        for (int d = 0; d < NUM_DOFS; ++d) {
          const double s = sol(d, e);
          gradX += s * quadToDofD(0, d, q);
          gradY += s * quadToDofD(1, d, q);
          gradZ += s * quadToDofD(2, d, q);
        }
        const double O11 = oper(0, q, e);
        const double O12 = oper(1, q, e);
        const double O13 = oper(2, q, e);
        const double O22 = oper(3, q, e);
        const double O23 = oper(4, q, e);
        const double O33 = oper(5, q, e);

        const double gradX2 = (O11 * gradX) + (O12 * gradY) + (O13 * gradZ);
        const double gradY2 = (O12 * gradX) + (O22 * gradY) + (O23 * gradZ);
        const double gradZ2 = (O13 * gradX) + (O23 * gradY) + (O33 * gradZ);

        for (int d = 0; d < NUM_DOFS; ++d) {
          r_sol[d] += ((gradX2 * quadToDofD(0, d, q)) +
                       (gradY2 * quadToDofD(1, d, q)) +
                       (gradZ2 * quadToDofD(2, d, q)));
        }
      }

      for (int d = 0; d < NUM_DOFS; ++d) {
        sol(d, e) = r_sol[d];
      }
    }
  }
}
//======================================
