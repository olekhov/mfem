// Copyright (c) 2010, Lawrence Livermore National Security, LLC. Produced at
// the Lawrence Livermore National Laboratory. LLNL-CODE-443211. All Rights
// reserved. See file COPYRIGHT for details.
//
// This file is part of the MFEM library. For more information and source code
// availability see http://mfem.org.
//
// MFEM is free software; you can redistribute it and/or modify it under the
// terms of the GNU Lesser General Public License (as published by the Free
// Software Foundation) version 2.1 dated February 1999.

#include "occa://mfem/fem/defines.okl"

//---[ 1D ]-----------------------------
kernel void GridFuncToQuad1D(const int numElements,
                             const DofToQuad_t restrict dofToQuad,
                             const DLocalMap1D_t restrict l2gMap,
                             const double * restrict gf,
                             QLocal1D_t restrict out) {
  for (int e = 0; e < numElements; ++e; outer) {
    for (int dummy = 0; dummy < 1; ++dummy; inner) {
      double r_out[NUM_QUAD_1D];
      for (int qx = 0; qx < NUM_QUAD_1D; ++qx) {
        r_out[qx] = 0;
      }
      for (int dx = 0; dx < NUM_DOFS_1D; ++dx) {
        const double r_gf = gf[l2gMap(dx, e)];
        for (int qx = 0; qx < NUM_QUAD_1D; ++qx) {
          r_out[qx] += r_gf * dofToQuad(qx, dx);
        }
      }
      for (int qx = 0; qx < NUM_QUAD_1D; ++qx) {
        out(qx, e) = r_out[qx];
      }
    }
  }
}
//======================================


//---[ 2D ]-----------------------------
kernel void GridFuncToQuad2D(const int numElements,
                             const DofToQuad_t restrict dofToQuad,
                             const DLocalMap2D_t restrict l2gMap,
                             const double * restrict gf,
                             QLocal2D_t restrict out) {
  // Iterate over elements
  for (int e = 0; e < numElements; ++e; outer) {
    for (int dummy=0; dummy<1; ++dummy; inner) {
      double out_xy[NUM_QUAD_1D][NUM_QUAD_1D];

      for (int qy = 0; qy < NUM_QUAD_1D; ++qy) {
        for (int qx = 0; qx < NUM_QUAD_1D; ++qx) {
          out_xy[qy][qx] = 0;
        }
      }

      for (int dy = 0; dy < NUM_DOFS_1D; ++dy) {
        double out_x[NUM_QUAD_1D];
        for (int qy = 0; qy < NUM_QUAD_1D; ++qy) {
          out_x[qy] = 0;
        }

        for (int dx = 0; dx < NUM_DOFS_1D; ++dx) {
          const double r_gf = gf[l2gMap(dx, dy, e)];
          for (int qy = 0; qy < NUM_QUAD_1D; ++qy) {
            out_x[qy] += r_gf * dofToQuad(qy, dx);
          }
        }

        for (int qy = 0; qy < NUM_QUAD_1D; ++qy) {
          const double d2q = dofToQuad(qy, dy);
          for (int qx = 0; qx < NUM_QUAD_1D; ++qx) {
            out_xy[qy][qx] += d2q * out_x[qx];
          }
        }
      }

      for (int qy = 0; qy < NUM_QUAD_1D; ++qy) {
        for (int qx = 0; qx < NUM_QUAD_1D; ++qx) {
          out(qx, qy, e) = out_xy[qy][qx];
        }
      }
    }
  }
}
//======================================


//---[ 3D ]-----------------------------
kernel void GridFuncToQuad3D(const int numElements,
                             const DofToQuad_t restrict dofToQuad,
                             const DLocalMap3D_t restrict l2gMap,
                             const double * restrict gf,
                             QLocal3D_t restrict out) {
  for (int e = 0; e < numElements; ++e; outer) {
    for (int dummy = 0; dummy < 1; ++dummy; inner) {
      double out_xyz[NUM_QUAD_1D][NUM_QUAD_1D][NUM_QUAD_1D];
      for (int qz = 0; qz < NUM_QUAD_1D; ++qz) {
        for (int qy = 0; qy < NUM_QUAD_1D; ++qy) {
          for (int qx = 0; qx < NUM_QUAD_1D; ++qx) {
            out_xyz[qz][qy][qx] = 0;
          }
        }
      }

      for (int dz = 0; dz < NUM_DOFS_1D; ++dz) {
        double out_xy[NUM_QUAD_1D][NUM_QUAD_1D];
        for (int qy = 0; qy < NUM_QUAD_1D; ++qy) {
          for (int qx = 0; qx < NUM_QUAD_1D; ++qx) {
            out_xy[qy][qx] = 0;
          }
        }

        for (int dy = 0; dy < NUM_DOFS_1D; ++dy) {
          double out_x[NUM_QUAD_1D];
          for (int qx = 0; qx < NUM_QUAD_1D; ++qx) {
            out_x[qx] = 0;
          }

          for (int dx = 0; dx < NUM_DOFS_1D; ++dx) {
            const double r_gf = gf[l2gMap(dx, dy, dz, e)];
            for (int qx = 0; qx < NUM_QUAD_1D; ++qx) {
              out_x[qx] += r_gf * dofToQuad(qx, dx);
            }
          }

          for (int qy = 0; qy < NUM_QUAD_1D; ++qy) {
            const double wy = dofToQuad(qy, dy);
            for (int qx = 0; qx < NUM_QUAD_1D; ++qx) {
              out_xy[qy][qx] += wy * out_x[qx];
            }
          }
        }

        for (int qz = 0; qz < NUM_QUAD_1D; ++qz) {
          const double wz = dofToQuad(qz, dz);
          for (int qy = 0; qy < NUM_QUAD_1D; ++qy) {
            for (int qx = 0; qx < NUM_QUAD_1D; ++qx) {
              out_xyz[qz][qy][qx] += wz * out_xy[qy][qx];
            }
          }
        }
      }

      for (int qz = 0; qz < NUM_QUAD_1D; ++qz) {
        for (int qy = 0; qy < NUM_QUAD_1D; ++qy) {
          for (int qx = 0; qx < NUM_QUAD_1D; ++qx) {
            out(qx, qy, qz, e) = out_xyz[qz][qy][qx];
          }
        }
      }
    }
  }
}
//======================================
